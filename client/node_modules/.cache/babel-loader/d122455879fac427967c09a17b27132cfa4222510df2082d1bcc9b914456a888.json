{"ast":null,"code":"var _jsxFileName = \"/Users/aaronkogan/react-practical-assignment/client/src/components/Search.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport \"./Search.css\";\nimport debounce from 'lodash.debounce';\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { searchPosts, getPosts } from \"../reducers/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction useDebounce(value, delay) {\n  _s();\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(() => {\n    // Set debouncedValue to value (passed in) after the specified delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Return a cleanup function that will be called every time ...\n    // ... useEffect is re-called. useEffect will only be re-called ...\n    // ... if value changes (see the inputs array below). \n    // This is how we prevent debouncedValue from changing if value is ...\n    // ... changed within the delay period. Timeout gets cleared and restarted.\n    // To put it in context, if the user is typing within our app's ...\n    // ... search box, we don't want the debouncedValue to update until ...\n    // ... they've stopped typing for more than 500ms.\n    return () => {\n      clearTimeout(handler);\n    };\n  },\n  // Only re-call effect if value changes\n  // You could also add the \"delay\" var to inputs array if you ...\n  // ... need to be able to change that dynamically.\n  [value]);\n  return debouncedValue;\n}\n_s(useDebounce, \"KDuPAtDOgxm8PU6legVJOb3oOmA=\");\nconst Search = () => {\n  _s2();\n  const dispatch = useDispatch();\n  const fetchSearch = async (query, cb) => {\n    console.warn('fetching ' + query);\n    const res = await fetch(query, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'Authorization'\n      }\n    });\n    cb(res);\n    const json = await res.json();\n    dispatch(searchPosts(json));\n    console.log('##3333' + JSON.stringify(json));\n  };\n  const fetchPosts = async query => {\n    console.warn('fetching ' + query);\n    const res = await fetch(query, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'Authorization'\n      }\n    });\n    const json = await res.json();\n    dispatch(getPosts(json));\n    console.log('##4444' + query);\n  };\n  const debouncedFetchData = debounce((query, cb) => {\n    fetchSearch('http://localhost:8080/post/search/' + query, cb);\n  }, 500);\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const debouncedSearchTerm = useDebounce(query, 500);\n  useEffect(() => {\n    query ? debouncedFetchData(query, res => {\n      setResults(res);\n    }) : fetchPosts('http://localhost:8080/post/');\n  }, [query]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Search filter\",\n      value: query,\n      type: \"text\",\n      onChange: e => {\n        setQuery(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s2(Search, \"Nh7pX06OL2Wwi11x+NqC7D+74bs=\", false, function () {\n  return [useDispatch, useDebounce];\n});\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["debounce","React","useState","useEffect","useDispatch","searchPosts","getPosts","jsxDEV","_jsxDEV","useDebounce","value","delay","_s","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","Search","_s2","dispatch","fetchSearch","query","cb","console","warn","res","fetch","method","headers","json","log","JSON","stringify","fetchPosts","debouncedFetchData","setQuery","results","setResults","debouncedSearchTerm","className","children","placeholder","type","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aaronkogan/react-practical-assignment/client/src/components/Search.js"],"sourcesContent":["import \"./Search.css\";\nimport debounce from 'lodash.debounce';\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { searchPosts, getPosts } from \"../reducers/posts\";\n\n\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Set debouncedValue to value (passed in) after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below). \n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    [value] \n  );\n\n  return debouncedValue;\n}\n\nconst Search = () => {\n\tconst dispatch = useDispatch();\n\tconst fetchSearch = async (query, cb) => {\n\t\tconsole.warn('fetching ' + query);\n\t\tconst res = await fetch(query, {method: 'GET', headers: {'Content-Type':'Authorization'}});\n\t\tcb(res);\n\t\tconst json = await res.json();\n\t\tdispatch(searchPosts(json));\n\t\tconsole.log('##3333'+JSON.stringify(json));\n\t  };\n\n  const fetchPosts = async (query) => {\n\t\tconsole.warn('fetching ' + query);\n\t\tconst res = await fetch(query, {method: 'GET', headers: {'Content-Type':'Authorization'}});\n\t\tconst json = await res.json();\n\t\tdispatch(getPosts(json))\n\t\tconsole.log('##4444'+query);\n\t  };\n\n  const debouncedFetchData = debounce((query, cb) => {\n\t\tfetchSearch('http://localhost:8080/post/search/'+query, cb);\n\t  }, 500);\n\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const debouncedSearchTerm = useDebounce(query, 500);\n    useEffect(() => {\n\t\tquery ? debouncedFetchData(query, res => {\n\t\t\tsetResults(res);\n\t\t\t}) : fetchPosts('http://localhost:8080/post/')\n\n    }, [query]\n    )\n\n  return (\n    <div className=\"search\">\n      <input placeholder=\"Search filter\" value={query} type=\"text\" onChange={e => {setQuery(e.target.value)}}/>\n    </div>\n  );\n}\n\nexport default Search;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}